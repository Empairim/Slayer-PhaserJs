In Phaser, the following elements are global once created:
//global general notes
1. **Animations**: As we discussed earlier, animations are global and can be used in any scene once they are created.

2. **Plugins**: Plugins are also global. Once a plugin is installed, it can be accessed from any scene.

3. **Cache**: The cache is global and is accessible from any scene. The cache is where Phaser stores loaded assets, so any assets you load into the cache in one scene will be available in all other scenes.

4. **Registry**: The registry is a global object where you can store data that needs to be shared between scenes.

5. **Input Manager**: The input manager is global and handles all input across all scenes.

6. **Sound Manager**: The sound manager is global and manages all sounds and music.

7. **Game Configuration**: The game configuration object is global and contains the configuration settings for the entire game.

Can flip the sprite to make it face the other direction. This is done by setting the `flipX` or `flipY` property of the sprite to `true`.
// to add collision and dmaage to game use collid() and overlap() methods then you pass the 2 objects you want to collide and a callback function that will be called when the collision happens and then null and the scene object or scope of the function
//spritesheetnotes
if a sprite sheet has different amount of frame in its sheet just multiple the max horizontal row and the amount of verticle frames to know where to start so if a sheet is 10x10 but 3rd row only has 3 frames the 4th row is still going to start at 30 0 indexed.
//sprite notes
setScale(2) // doubles the size of the sprite
setBodySize(width, height) // sets the size of the sprite's hitbox
setCollideWorldBounds(true) // makes the sprite collide with the world bounds
setDepth(depth) // sets the rendering order of the sprite
setOrigin(x, y) // sets the origin of the sprite
setRotation(angle) // rotates the sprite by the specified angle
setTint(color) // sets the tint color of the sprite
setVisible(visible) // sets the visibility of the sprite
setVelocity(x, y) // sets the velocity of the sprite
setVelocityX(x) // sets the horizontal velocity of the sprite
setVelocityY(y) // sets the vertical velocity of the sprite
setX(x) // sets the x position of the sprite
setY(y) // sets the y position of the sprite
scene.add.existing(this) // adds the sprite to the scene
scene.physics.add.existing(this) // adds physics to the sprite
this.on('animationcomplete', this.onAnimationComplete.bind(this), this ) // listens for the animationcomplete event and calls the onAnimationComplete method
.input.keyboard.addKeys('W,A,S,D,SPACE') // creates keyboard input for the specified keys
setBounce(1) // sets the bounce factor of the sprite
//physics notes
Phaser.Math.Angle.BetweenPoints(point1, point2) // calculates the angle between two points
Phaser.Math.RadToDeg(angle) // converts an angle from radians to degrees
Phaser.Math.DegToRad(angle) // converts an angle from degrees to radians
Phaser.Math.Distance.Between(x1, y1, x2, y2) // calculates the distance between two points
Phaser.Math.Clamp(value, min, max) // clamps a value between a minimum and maximum
Phaser.Math.Random.Between(min, max) // generates a random number between a minimum and maximum
Phaser.Math.Random.RndSign() // generates a random sign (-1 or 1)
Phaser.Math.Random.Rnd() // generates a random number between 0 and 1
Phaser.Math.Random.RndBool() // generates a random boolean value
Phaser.Math.Random.RndArray(array) // selects a random element from an array
Phaser.Math.Random.RndElement(array) // selects a random element from an array
Phaser.Math.Random.RndWeightedElement(array) // selects a random element from an array with weighted probabilities
 this.input.on('pointerdown', this.onPointerDown, this) // listens for the pointerdown event and calls the onPointerDown method

//particle emitter notes
 emitter = scene.add.particles(x,y,texture, {projectile properties}) // creates a particle emitter at the specified position with the specified texture then pass an object with the properties of the particles
 particleEmitter.startFollow(player) // makes the particle emitter follow the player or the specified object passed as an argument
 { min: 0, max: 0 }: All particles are emitted to the right.
{ min: 90, max: 90 }: All particles are emitted upwards.
{ min: 0, max: 360 }: Particles are emitted in all directions, creating an explosion-like effect.
{ min: -30, max: 30 }: Particles are emitted in a cone shape to the right. This could be used for a shotgun effect.
{ min: 45, max: 135 }: Particles are emitted in a cone shape upwards. This could be used for a fountain effect

 //angles notes 
 //math.atan2 returns the angle in radians, so we convert it to degrees, we pass y first because it's the vertical axis to the x horizontal axis to get the angle. 





//time events notes
In Phaser 3, using the scene.time.now or scene.time.elapsed properties can help track the passage of time more accurately. The scene.time.now property returns the current timestamp in milliseconds, while the scene.time.elapsed property returns the time elapsed since the last frame in milliseconds. By using these properties, you can create more precise timing for your game events and animations.
when dealing with time in phaser 3 just use time = scene.time.now to get the current time in milliseconds or grab it from a class thats connected to main scene wont pass it as a parameter for some weird reason

//animations notes

//how projectile aniamtions work// how widht and height works in top down game//Yes, in a top-down game where bullets move vertically (up or down), the height property of the bullet, which controls the "width" of the bullet in terms of its hit area, will have a more significant impact on the bullet's collision detection. This is because the bullet's hit area (or hitbox) is typically determined by these dimensions. The width property, on the other hand, will control the "length" of the bullet, which may not be as relevant in this case. The height property will be more important for detecting collisions with other objects in the game world.

In Phaser 3, the true parameter in the play method is used to indicate that the animation should restart from the beginning each time it is played. This ensures that the animation will play correctly even if it was previously playing.

Without the true parameter, the animation might not start from the first frame every time, especially if it's already playing. This can lead to issues where the animation appears stuck or doesn't seem to play at all, as it might be stuck at the end or middle of the animation cycle.

if enemy hit box is off because of flipped sprite use setOffset() to adjust the hitbox for example 	// Flip the enemy to face the player
if (this.enemy.x > player.x) {
   this.enemy.flipX = true;
   this.enemy.body.setOffset(10, 13); // Adjust these values based on your sprite dimensions
} else {
   this.enemy.flipX = false;
   this.enemy.body.setOffset(30, 13); // Adjust these values based on your sprite dimensions
}
Tweens are a way to create animations in Phaser. A tween is an animation that changes a property of an object over time. For example, you can create a tween that moves a sprite from one position to another, or changes its scale or alpha value.
//MISC NOTES
//IF NO LOG ERROR CHECK NETWORK TAB IN INSPECT ELEMENT TO SEE IF ASSETS ARE LOADING ALOT OF TIMES ITS SIMPLY FORGETTING TO PUT .js AT THE END OF THE FILE PATH



//state machine notes
A state machine is a design pattern that allows an object to change its behavior based on its internal state. In the context of game development, a state machine can be used to manage the different states of a game object, such as an enemy character or player character.

//switch statement notes
A switch statement is a control flow statement that allows a program to evaluate an expression and execute different code blocks based on the value of the expression. In the context of game development, a switch statement can be used to handle different cases or states of a game object, such as different animations or behaviors.

//nested if statements notes
Nested if statements are if statements that are nested within other if statements. They allow for more complex conditional logic by checking multiple conditions in a hierarchical manner. In the context of game development, nested if statements can be used to handle different scenarios or states of a game object based on multiple conditions.

//phaser3 .on() notes
In Phaser 3, the .on method is used to register event listeners. It's part of the EventEmitter class, which is used by many objects in Phaser to emit and listen for events.

The first argument to .on is the name of the event to listen for. Phaser 3 has many built-in events, and you can also emit and listen for your own custom events.

Here are some of the built-in events related to animations:

animationstart: Emitted when an animation starts playing.
animationrepeat: Emitted each time an animation repeats.
animationupdate: Emitted each time an animation frame updates.
animationcomplete: Emitted when an animation finishes playing.
animationrestart: Emitted when an animation restarts after completing.
These event names are indeed key names that reference specific events in Phaser 3. They are not just variable names that you can call anything. When you use these event names with the .on method, Phaser 3 knows which event to listen for and when to trigger the associated callback function.


//Phaser 3 PathFollower

A PathFollower is a Phaser GameObject that can follow a path defined by a series of points.
It can be used to create complex movement patterns for game objects.
The path can be a straight line, a curve, a circle, or any other shape.
The PathFollower can automatically rotate to face the direction of the path.
The speed of the PathFollower can be controlled, and it can move back and forth along the path.
examples:
Create a path for the follower to follow:
let path = new Phaser.Curves.Path(100, 100).splineTo([ 164, 46, 274, 142, 412, 57, 522, 141, 664, 64 ]);
let follower = this.add.follower(path, 100, 100, 'enemy');
follower.startFollow({
    duration: 5000,
    repeat: -1,
    yoyo: true
});
pattern attacks:
let path = new Phaser.Curves.Path(100, 100).circle(50);
let bullets = this.physics.add.group({
    classType: Phaser.GameObjects.PathFollower,
    key: 'bullet',
    repeat: 10,
    setXY: { x: 100, y: 100 }
});
bullets.getChildren().forEach((bullet, i) => {
    bullet.startFollow({
        path: path,
        duration: 2000,
        startAt: i / 10
    });
});

//rayCasting notes
Raycasting is a technique where a line (or "ray") is cast from a starting point in a certain direction, and you check what that line intersects with. It's commonly used in games for things like line of sight, AI field of view, and shooting bullets.

Here's a simple ASCII diagram to illustrate:

P
In this diagram:

E is the enemy (the starting point of the ray).
P is the player (the end point of the ray).
W is a wall (an obstacle).
------------------ is the ray.
The ray is cast from E towards P. It intersects with W, so we know that E cannot see P because W is in the way.

In code, you would create a line from E to P, then check if that line intersects with W. Here's a basic example in Phaser:

}
In this code, ray is the line from E to P. wallBounds is the bounding box of W. Phaser.Geom.Intersects.LineToRectangle(ray, wallBounds) checks if the ray intersects with the wall. If it does, isPlayerVisible will be false. If it doesn't, isPlayerVisible will be true.

This is a simple example and real-world usage might be more complex. For example, you might have multiple walls and need to check if the ray intersects with any of them. Or you might want to cast multiple rays in different directions to create a field of view. But the basic principle is the same: create a line and check what it intersects with.

check 360 degrees of vision:
let enemyPosition = new Phaser.Math.Vector2(enemy.x, enemy.y);

let obstacles = this.physics.add.group({
    // Add your obstacles here
});

let isPlayerVisible = false;

for (let angle = 0; angle < 360; angle += 10) { // Adjust the step size to change the resolution of the FOV
    let rayEnd = new Phaser.Math.Vector2();
    rayEnd.setToPolar(Phaser.Math.DegToRad(angle), 1000); // 1000 is the length of the ray
    rayEnd.add(enemyPosition);

    let ray = new Phaser.Geom.Line(enemyPosition.x, enemyPosition.y, rayEnd.x, rayEnd.y);

    if (!obstacles.getChildren().some(obstacle => {
        let obstacleBounds = obstacle.getBounds();
        return Phaser.Geom.Intersects.LineToRectangle(ray, obstacleBounds);
    })) {
        // The ray did not intersect with any obstacles, so check if it intersects with the player
        let playerBounds = player.getBounds();
        if (Phaser.Geom.Intersects.LineToRectangle(ray, playerBounds)) {
            isPlayerVisible = true;
            break;
        }
    }
}

if (isPlayerVisible) {
    // The player is visible to the enemy
} else {
    // The player is not visible to the enemy
}


Phaser.Physics.Arcade.GetRaysFromPointToPolygon(point, polygon) // returns an array of rays from a point to a polygon easier way to do a ray cast

let enemyPosition = new Phaser.Math.Vector2(enemy.x, enemy.y);

// Define the field of view as a triangle
let fov = new Phaser.Geom.Triangle(enemy.x, enemy.y, point1.x, point1.y, point2.x, point2.y);

// Convert the triangle to a polygon
let fovPolygon = new Phaser.Geom.Polygon([fov.x1, fov.y1, fov.x2, fov.y2, fov.x3, fov.y3]);

// Cast rays from the enemy to the vertices of the field of view
let intersections = Phaser.Physics.Arcade.GetRaysFromPointToPolygon(enemyPosition.x, enemyPosition.y, [fovPolygon]);

if (intersections.length > 0) {
    // There are intersections
    intersections.forEach(intersection => {
        console.log(`Intersection at (${intersection.x}, ${intersection.y}) with angle ${intersection.z}`);
    });
} else {
    // There are no intersections
}