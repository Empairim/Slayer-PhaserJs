In Phaser, the following elements are global once created:

1. **Animations**: As we discussed earlier, animations are global and can be used in any scene once they are created.

2. **Plugins**: Plugins are also global. Once a plugin is installed, it can be accessed from any scene.

3. **Cache**: The cache is global and is accessible from any scene. The cache is where Phaser stores loaded assets, so any assets you load into the cache in one scene will be available in all other scenes.

4. **Registry**: The registry is a global object where you can store data that needs to be shared between scenes.

5. **Input Manager**: The input manager is global and handles all input across all scenes.

6. **Sound Manager**: The sound manager is global and manages all sounds and music.

7. **Game Configuration**: The game configuration object is global and contains the configuration settings for the entire game.
Can flip the sprite to make it face the other direction. This is done by setting the `flipX` or `flipY` property of the sprite to `true`.
// to add collision and dmaage to game use collid() and overlap() methods then you pass the 2 objects you want to collide and a callback function that will be called when the collision happens and then null and the scene object or scope of the function
//spritesheetnotes
if a sprite sheet has different amount of frame in its sheet just multiple the max horizontal row and the amount of verticle frames to know where to start so if a sheet is 10x10 but 3rd row only has 3 frames the 4th row is still going to start at 30 0 indexed.
//sprite notes
setScale(2) // doubles the size of the sprite
setBodySize(width, height) // sets the size of the sprite's hitbox
setCollideWorldBounds(true) // makes the sprite collide with the world bounds
setDepth(depth) // sets the rendering order of the sprite
setOrigin(x, y) // sets the origin of the sprite
setRotation(angle) // rotates the sprite by the specified angle
setTint(color) // sets the tint color of the sprite
setVisible(visible) // sets the visibility of the sprite
setVelocity(x, y) // sets the velocity of the sprite
setVelocityX(x) // sets the horizontal velocity of the sprite
setVelocityY(y) // sets the vertical velocity of the sprite
setX(x) // sets the x position of the sprite
setY(y) // sets the y position of the sprite
scene.add.existing(this) // adds the sprite to the scene
scene.physics.add.existing(this) // adds physics to the sprite
this.on('animationcomplete', this.onAnimationComplete.bind(this), this ) // listens for the animationcomplete event and calls the onAnimationComplete method
.input.keyboard.addKeys('W,A,S,D,SPACE') // creates keyboard input for the specified keys
setBounce(1) // sets the bounce factor of the sprite
//physics notes
Phaser.Math.Angle.BetweenPoints(point1, point2) // calculates the angle between two points
Phaser.Math.RadToDeg(angle) // converts an angle from radians to degrees
Phaser.Math.DegToRad(angle) // converts an angle from degrees to radians
Phaser.Math.Distance.Between(x1, y1, x2, y2) // calculates the distance between two points
Phaser.Math.Clamp(value, min, max) // clamps a value between a minimum and maximum
Phaser.Math.Random.Between(min, max) // generates a random number between a minimum and maximum
Phaser.Math.Random.RndSign() // generates a random sign (-1 or 1)
Phaser.Math.Random.Rnd() // generates a random number between 0 and 1
Phaser.Math.Random.RndBool() // generates a random boolean value
Phaser.Math.Random.RndArray(array) // selects a random element from an array
Phaser.Math.Random.RndElement(array) // selects a random element from an array
Phaser.Math.Random.RndWeightedElement(array) // selects a random element from an array with weighted probabilities
 this.input.on('pointerdown', this.onPointerDown, this) // listens for the pointerdown event and calls the onPointerDown method

    //particle emitter notes
 emitter = scene.add.particles(x,y,texture, {projectile properties}) // creates a particle emitter at the specified position with the specified texture then pass an object with the properties of the particles
 particleEmitter.startFollow(player) // makes the particle emitter follow the player or the specified object passed as an argument

 //angles notes 
 //math.atan2 returns the angle in radians, so we convert it to degrees, we pass y first because it's the vertical axis to the x horizontal axis to get the angle. 

Tweens are a way to create animations in Phaser. A tween is an animation that changes a property of an object over time. For example, you can create a tween that moves a sprite from one position to another, or changes its scale or alpha value.